# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'lab_project.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import (QtCore,
                   QtGui,
                   QtWidgets,
                   QtTest)

from PyQt5.QtCore import QTimer

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib.animation as animation
import matplotlib
from PyQt5.QtWidgets import (QVBoxLayout,
                             QMessageBox,
                             QTableWidgetItem)

from COM_settings import COM_Settings_Window

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure
import matplotlib.animation as animation
import matplotlib
import matplotlib.pyplot as plt

import configparser
import serial
import math
from function_button import Function_Button
import serial.tools.list_ports
import numpy as np
import csv
import time
class Ui_MainWindow(QtWidgets.QMainWindow):
    time_update_display = 100
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1595, 847)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_connect = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_connect.setGeometry(QtCore.QRect(20, 90, 121, 51))
        self.pushButton_connect.setStyleSheet("QPushButton{\n"
                                              "font: 500 10pt Tahoma;\n"
                                              "color: rgb(255, 0, 0);\n"
                                              "background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 rgb(179, 179, 179,255), stop:1 rgba(255, 255, 255, 255));\n"
                                              "border: 1px solid rgb(172, 172, 172);         \n"
                                              "border-radius:5;\n"
                                              "}\n"
                                              "QPushButton:pressed {\n"
                                              "font: 500 10pt Tahoma;\n"
                                              "color:rgb(184, 0, 0);\n"
                                              "background-color:rgb(177, 177, 177);\n"
                                              "border: 2px solid rgb(172, 172, 172);            \n"
                                              "border-radius:5\n"
                                              "}\n"
                                              "                                              ")
        self.pushButton_connect.setObjectName("pushButton_connect")
        self.comboBox_select_com = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_select_com.setGeometry(QtCore.QRect(20, 40, 111, 31))
        self.comboBox_select_com.setObjectName("comboBox_select_com")
        self.label_select_com = QtWidgets.QLabel(self.centralwidget)
        self.label_select_com.setGeometry(QtCore.QRect(30, 10, 91, 31))
        self.label_select_com.setStyleSheet("font: 500 8pt \"Tahoma\";\n"
                                            "color: rgb(0, 0, 255);")
        self.label_select_com.setObjectName("label_select_com")
        self.pushButton_com_settings = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_com_settings.setGeometry(QtCore.QRect(160, 40, 101, 31))
        self.pushButton_com_settings.setStyleSheet("QPushButton{\n"
                                                   "font: 500 8pt Tahoma;\n"
                                                   "color: rgb(0, 0, 255);\n"
                                                   "background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 rgb(179, 179, 179,255), stop:1 rgba(255, 255, 255, 255));\n"
                                                   "border: 1px solid rgb(172, 172, 172);         \n"
                                                   "border-radius:5;\n"
                                                   "}\n"
                                                   "                                              ")
        self.pushButton_com_settings.setObjectName("pushButton_com_settings")
        self.radioButton_automatically = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_automatically.setGeometry(QtCore.QRect(20, 160, 121, 20))
        self.radioButton_automatically.setStyleSheet("font: 500 8pt \"Tahoma\";")
        self.radioButton_automatically.setObjectName("radioButton_automatically")
        self.label_v = QtWidgets.QLabel(self.centralwidget)
        self.label_v.setGeometry(QtCore.QRect(220, 120, 41, 61))
        self.label_v.setStyleSheet("font: 500 35pt \"Tahoma\";\n"
                                   "color: rgb(255, 0, 0);")
        self.label_v.setObjectName("label_v")
        self.label_voltage = QtWidgets.QLabel(self.centralwidget)
        self.label_voltage.setGeometry(QtCore.QRect(506, 90, 91, 31))
        self.label_voltage.setStyleSheet("font: 500 8pt \"Tahoma\";\n"
                                         "color: rgb(0, 0, 255);")
        self.label_voltage.setObjectName("label_voltage")
        self.label_v_display = QtWidgets.QLabel(self.centralwidget)
        self.label_v_display.setGeometry(QtCore.QRect(290, 120, 181, 61))
        self.label_v_display.setStyleSheet("background-color: rgb(0, 0, 0);\n"
                                           "color: rgb(255, 0, 0);\n"
                                           "font: 35pt \"Tahoma\";")
        self.label_v_display.setObjectName("label_v_display")
        self.label_black_for_v_display = QtWidgets.QLabel(self.centralwidget)
        self.label_black_for_v_display.setGeometry(QtCore.QRect(286, 117, 188, 68))
        self.label_black_for_v_display.setStyleSheet("background-color: rgb(107, 107, 107);")
        self.label_black_for_v_display.setText("")
        self.label_black_for_v_display.setObjectName("label_black_for_v_display")
        self.label_green_for_v_display = QtWidgets.QLabel(self.centralwidget)
        self.label_green_for_v_display.setGeometry(QtCore.QRect(280, 112, 200, 78))
        self.label_green_for_v_display.setStyleSheet("background-color: rgb(186, 186, 186);\n"
                                                     "border-radius:5px;")
        self.label_green_for_v_display.setText("")
        self.label_green_for_v_display.setObjectName("label_green_for_v_display")
        self.lineEdit_v = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_v.setGeometry(QtCore.QRect(490, 120, 91, 31))
        self.lineEdit_v.setStyleSheet("font: 16pt \"Tahoma\";")
        self.lineEdit_v.setObjectName("lineEdit_v")
        self.label_black_for_a_display = QtWidgets.QLabel(self.centralwidget)
        self.label_black_for_a_display.setGeometry(QtCore.QRect(696, 117, 188, 68))
        self.label_black_for_a_display.setStyleSheet("background-color: rgb(107, 107, 107);")
        self.label_black_for_a_display.setText("")
        self.label_black_for_a_display.setObjectName("label_black_for_a_display")
        self.label_current = QtWidgets.QLabel(self.centralwidget)
        self.label_current.setGeometry(QtCore.QRect(913, 90, 91, 31))
        self.label_current.setStyleSheet("font: 500 8pt \"Tahoma\";\n"
                                         "color: rgb(0, 0, 255);")
        self.label_current.setObjectName("label_current")
        self.lineEdit_a = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_a.setGeometry(QtCore.QRect(900, 120, 91, 31))
        self.lineEdit_a.setStyleSheet("font: 16pt \"Tahoma\";")
        self.lineEdit_a.setObjectName("lineEdit_a")
        self.label_a = QtWidgets.QLabel(self.centralwidget)
        self.label_a.setGeometry(QtCore.QRect(630, 120, 51, 61))
        self.label_a.setStyleSheet("font: 500 35pt \"Tahoma\";\n"
                                   "color: rgb(255, 0, 0);")
        self.label_a.setObjectName("label_a")
        self.label_a_display = QtWidgets.QLabel(self.centralwidget)
        self.label_a_display.setGeometry(QtCore.QRect(700, 120, 181, 61))
        self.label_a_display.setStyleSheet("background-color: rgb(0, 0, 0);\n"
                                           "color: rgb(255, 0, 0);\n"
                                           "font: 35pt \"Tahoma\";")
        self.label_a_display.setObjectName("label_a_display")
        self.label_green_for_a_display = QtWidgets.QLabel(self.centralwidget)
        self.label_green_for_a_display.setGeometry(QtCore.QRect(690, 112, 200, 78))
        self.label_green_for_a_display.setStyleSheet("background-color: rgb(186, 186, 186);\n"
                                                     "border-radius:5px;")
        self.label_green_for_a_display.setText("")
        self.label_green_for_a_display.setObjectName("label_green_for_a_display")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(29, 250, 391, 521))
        self.tableWidget.setStyleSheet("")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        self.label_black_for_table = QtWidgets.QLabel(self.centralwidget)
        self.label_black_for_table.setGeometry(QtCore.QRect(27, 248, 395, 525))
        self.label_black_for_table.setStyleSheet("background-color: rgb(107, 107, 107);")
        self.label_black_for_table.setText("")
        self.label_black_for_table.setObjectName("label_black_for_table")
        self.label_green_for_table = QtWidgets.QLabel(self.centralwidget)
        self.label_green_for_table.setGeometry(QtCore.QRect(22, 243, 405, 535))
        self.label_green_for_table.setStyleSheet("background-color: rgb(186, 186, 186);\n"
                                                 "border-radius:5px;")
        self.label_green_for_table.setText("")
        self.label_green_for_table.setObjectName("label_green_for_table")
        self.label_start_current = QtWidgets.QLabel(self.centralwidget)
        self.label_start_current.setGeometry(QtCore.QRect(465, 260, 101, 31))
        self.label_start_current.setStyleSheet("font: 500 8pt \"Tahoma\";\n"
                                               "color: rgb(0, 0, 255);")
        self.label_start_current.setObjectName("label_start_current")
        self.lineEdit_start_current = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_start_current.setGeometry(QtCore.QRect(469, 290, 91, 31))
        self.lineEdit_start_current.setStyleSheet("font: 16pt \"Tahoma\";")
        self.lineEdit_start_current.setObjectName("lineEdit_start_current")
        self.lineEdit_current_intarval = QtWidgets.QLabel(self.centralwidget)
        self.lineEdit_current_intarval.setGeometry(QtCore.QRect(456, 420, 121, 31))
        self.lineEdit_current_intarval.setStyleSheet("font: 500 8pt \"Tahoma\";\n"
                                                     "color: rgb(0, 0, 255);")
        self.lineEdit_current_intarval.setObjectName("lineEdit_current_intarval")
        self.lineEdit_end_current = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_end_current.setGeometry(QtCore.QRect(469, 370, 91, 31))
        self.lineEdit_end_current.setStyleSheet("font: 16pt \"Tahoma\";")
        self.lineEdit_end_current.setObjectName("lineEdit_end_current")
        self.label_select_com_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_select_com_4.setGeometry(QtCore.QRect(469, 340, 91, 31))
        self.label_select_com_4.setStyleSheet("font: 500 8pt \"Tahoma\";\n"
                                              "color: rgb(0, 0, 255);")
        self.label_select_com_4.setObjectName("label_select_com_4")
        self.lineEdit_current_interval = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_current_interval.setGeometry(QtCore.QRect(469, 450, 91, 31))
        self.lineEdit_current_interval.setStyleSheet("font: 16pt \"Tahoma\";")
        self.lineEdit_current_interval.setObjectName("lineEdit_current_interval")
        self.lineEdit_period = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_period.setGeometry(QtCore.QRect(472, 530, 91, 31))
        self.lineEdit_period.setStyleSheet("font: 16pt \"Tahoma\";")
        self.lineEdit_period.setObjectName("lineEdit_period")
        self.label_period = QtWidgets.QLabel(self.centralwidget)
        self.label_period.setGeometry(QtCore.QRect(489, 500, 61, 31))
        self.label_period.setStyleSheet("font: 500 8pt \"Tahoma\";\n"
                                        "color: rgb(0, 0, 255);")
        self.label_period.setObjectName("label_period")
        self.toolButton_start_logging = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_start_logging.setGeometry(QtCore.QRect(451, 590, 131, 41))
        self.toolButton_start_logging.setStyleSheet("font: 75 12pt Tahoma;")
        self.toolButton_start_logging.setObjectName("toolButton_start_logging")
        self.toolButton_end_logging = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_end_logging.setGeometry(QtCore.QRect(451, 650, 131, 41))
        self.toolButton_end_logging.setStyleSheet("font: 75 12pt Tahoma;")
        self.toolButton_end_logging.setObjectName("toolButton_end_logging")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(630, 290, 431, 321))
        self.graphicsView.setObjectName("graphicsView")
        self.label_current_voltage = QtWidgets.QLabel(self.centralwidget)
        self.label_current_voltage.setGeometry(QtCore.QRect(760, 240, 191, 41))
        self.label_current_voltage.setStyleSheet("font: 500 15pt \"Tahoma\";\n"
                                                 "color: rgb(0, 0, 255);")
        self.label_current_voltage.setObjectName("label_current_voltage")
        self.label_black_for_graph = QtWidgets.QLabel(self.centralwidget)
        self.label_black_for_graph.setGeometry(QtCore.QRect(628, 288, 435, 325))
        self.label_black_for_graph.setStyleSheet("background-color: rgb(107, 107, 107);")
        self.label_black_for_graph.setText("")
        self.label_black_for_graph.setObjectName("label_black_for_graph")
        self.label_green_for_graph = QtWidgets.QLabel(self.centralwidget)
        self.label_green_for_graph.setGeometry(QtCore.QRect(623, 283, 445, 336))
        self.label_green_for_graph.setStyleSheet("background-color: rgb(186, 186, 186);\n"
                                                 "border-radius:5px;")
        self.label_green_for_graph.setText("")
        self.label_green_for_graph.setObjectName("label_green_for_graph")
        self.pushButton_open_v = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_open_v.setGeometry(QtCore.QRect(730, 640, 93, 28))
        self.pushButton_open_v.setObjectName("pushButton_open_v")
        self.pushButton_open_a = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_open_a.setGeometry(QtCore.QRect(840, 640, 93, 28))
        self.pushButton_open_a.setObjectName("pushButton_open_a")
        self.pushButton_clear = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_clear.setGeometry(QtCore.QRect(620, 640, 93, 28))
        self.pushButton_clear.setObjectName("pushButton_clear")
        self.label_remaining_time = QtWidgets.QLabel(self.centralwidget)
        self.label_remaining_time.setGeometry(QtCore.QRect(640, 700, 181, 41))
        self.label_remaining_time.setStyleSheet("font: 500 14pt \"Tahoma\";")
        self.label_remaining_time.setObjectName("label_remaining_time")
        self.label_remaining_time_display = QtWidgets.QLabel(self.centralwidget)
        self.label_remaining_time_display.setGeometry(QtCore.QRect(840, 690, 91, 61))
        self.label_remaining_time_display.setStyleSheet("font: 500 18pt \"Tahoma\";")
        self.label_remaining_time_display.setObjectName("label_remaining_time_display")
        self.pushButton_set_control_buttons = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_set_control_buttons.setGeometry(QtCore.QRect(1096, 120, 121, 28))
        self.pushButton_set_control_buttons.setObjectName("pushButton_set_control_buttons")
        self.label_1 = QtWidgets.QLabel(self.centralwidget)
        self.label_1.setGeometry(QtCore.QRect(1080, 157, 31, 31))
        self.label_1.setStyleSheet("font: 500 10pt \"Tahoma\";\n"
                                   "color: rgb(0, 0, 255);")
        self.label_1.setObjectName("label_1")
        self.label_com_log = QtWidgets.QLabel(self.centralwidget)
        self.label_com_log.setGeometry(QtCore.QRect(1340, 120, 111, 41))
        self.label_com_log.setStyleSheet("font: 500 14pt \"Tahoma\";\n"
                                         "color: rgb(0, 0, 255);")
        self.label_com_log.setObjectName("label_com_log")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(1080, 199, 31, 31))
        self.label_2.setStyleSheet("font: 500 10pt \"Tahoma\";\n"
                                   "color: rgb(0, 0, 255);")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(1080, 238, 31, 31))
        self.label_3.setStyleSheet("font: 500 10pt \"Tahoma\";\n"
                                   "color: rgb(0, 0, 255);")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(1080, 278, 31, 31))
        self.label_4.setStyleSheet("font: 500 10pt \"Tahoma\";\n"
                                   "color: rgb(0, 0, 255);")
        self.label_4.setObjectName("label_4")
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(1230, 170, 341, 531))
        self.listWidget.setObjectName("listWidget")
        self.pushButton_1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_1.setGeometry(QtCore.QRect(1110, 160, 93, 28))
        self.pushButton_1.setStyleSheet("font:  10pt \"Tahoma\";")
        self.pushButton_1.setObjectName("pushButton_1")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(1110, 200, 93, 28))
        self.pushButton_2.setStyleSheet("font:  10pt \"Tahoma\";")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(1110, 240, 93, 28))
        self.pushButton_3.setStyleSheet("font:  10pt \"Tahoma\";")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(1110, 280, 93, 28))
        self.pushButton_4.setStyleSheet("font:  10pt \"Tahoma\";")
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_black_for_list = QtWidgets.QLabel(self.centralwidget)
        self.label_black_for_list.setGeometry(QtCore.QRect(1229, 169, 344, 535))
        self.label_black_for_list.setStyleSheet("background-color: rgb(107, 107, 107);")
        self.label_black_for_list.setText("")
        self.label_black_for_list.setObjectName("label_black_for_list")
        self.label_green_for_list = QtWidgets.QLabel(self.centralwidget)
        self.label_green_for_list.setGeometry(QtCore.QRect(1224, 164, 354, 545))
        self.label_green_for_list.setStyleSheet("background-color: rgb(186, 186, 186);\n"
                                                "border-radius:5px;")
        self.label_green_for_list.setText("")
        self.label_green_for_list.setObjectName("label_green_for_list")
        self.toolButton_set_voltage = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_set_voltage.setGeometry(QtCore.QRect(490, 160, 91, 31))
        self.toolButton_set_voltage.setStyleSheet("font: 75 8pt Tahoma;     ")
        self.toolButton_set_voltage.setObjectName("toolButton_set_voltage")
        self.toolButton_set_current = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_set_current.setGeometry(QtCore.QRect(900, 160, 91, 31))
        self.toolButton_set_current.setStyleSheet("font: 75 8pt Tahoma;     ")
        self.toolButton_set_current.setObjectName("toolButton_set_current")
        self.label_green_for_list.raise_()
        self.label_black_for_list.raise_()
        self.label_green_for_graph.raise_()
        self.label_black_for_graph.raise_()
        self.label_green_for_table.raise_()
        self.label_black_for_table.raise_()
        self.label_green_for_a_display.raise_()
        self.label_green_for_v_display.raise_()
        self.label_black_for_v_display.raise_()
        self.pushButton_connect.raise_()
        self.comboBox_select_com.raise_()
        self.label_select_com.raise_()
        self.pushButton_com_settings.raise_()
        self.radioButton_automatically.raise_()
        self.label_v.raise_()
        self.label_voltage.raise_()
        self.label_v_display.raise_()
        self.lineEdit_v.raise_()
        self.label_black_for_a_display.raise_()
        self.label_current.raise_()
        self.lineEdit_a.raise_()
        self.label_a.raise_()
        self.label_a_display.raise_()
        self.tableWidget.raise_()
        self.label_start_current.raise_()
        self.lineEdit_start_current.raise_()
        self.lineEdit_current_intarval.raise_()
        self.lineEdit_end_current.raise_()
        self.label_select_com_4.raise_()
        self.lineEdit_current_interval.raise_()
        self.lineEdit_period.raise_()
        self.label_period.raise_()
        self.toolButton_start_logging.raise_()
        self.toolButton_end_logging.raise_()
        self.graphicsView.raise_()
        self.label_current_voltage.raise_()
        self.pushButton_open_v.raise_()
        self.pushButton_open_a.raise_()
        self.pushButton_clear.raise_()
        self.label_remaining_time.raise_()
        self.label_remaining_time_display.raise_()
        self.pushButton_set_control_buttons.raise_()
        self.label_1.raise_()
        self.label_com_log.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self.label_4.raise_()
        self.listWidget.raise_()
        self.pushButton_1.raise_()
        self.pushButton_2.raise_()
        self.pushButton_3.raise_()
        self.pushButton_4.raise_()
        self.toolButton_set_voltage.raise_()
        self.toolButton_set_current.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1595, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_connect.setText(_translate("MainWindow", "Connect"))
        self.label_select_com.setText(_translate("MainWindow", "Select COM"))
        self.pushButton_com_settings.setText(_translate("MainWindow", "COM settings"))
        self.radioButton_automatically.setText(_translate("MainWindow", "Automatically"))
        self.label_v.setText(_translate("MainWindow", "V"))
        self.label_voltage.setText(_translate("MainWindow", "Voltage"))
        self.label_v_display.setText(_translate("MainWindow", "00.000"))
        self.lineEdit_v.setText(_translate("MainWindow", "00.000"))
        self.label_current.setText(_translate("MainWindow", "Current"))
        self.lineEdit_a.setText(_translate("MainWindow", "00.000"))
        self.label_a.setText(_translate("MainWindow", "A"))
        self.label_a_display.setText(_translate("MainWindow", "00.000"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "time"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "voltage"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "current"))
        self.label_start_current.setText(_translate("MainWindow", "Start current"))
        self.lineEdit_start_current.setText(_translate("MainWindow", "00.000"))
        self.lineEdit_current_intarval.setText(_translate("MainWindow", "Current interval"))
        self.lineEdit_end_current.setText(_translate("MainWindow", "00.000"))
        self.label_select_com_4.setText(_translate("MainWindow", "End current"))
        self.lineEdit_current_interval.setText(_translate("MainWindow", "00.000"))
        self.lineEdit_period.setText(_translate("MainWindow", "00.000"))
        self.label_period.setText(_translate("MainWindow", "Period"))
        self.toolButton_start_logging.setText(_translate("MainWindow", "Start logging"))
        self.toolButton_end_logging.setText(_translate("MainWindow", "End logging"))
        self.label_current_voltage.setText(_translate("MainWindow", "current-voltage"))
        self.pushButton_open_v.setText(_translate("MainWindow", "Open V(t)"))
        self.pushButton_open_a.setText(_translate("MainWindow", "Open I(t)"))
        self.pushButton_clear.setText(_translate("MainWindow", "Clear"))
        self.label_remaining_time.setText(_translate("MainWindow", "Remaining time:"))
        self.label_remaining_time_display.setText(_translate("MainWindow", "00:00"))
        self.pushButton_set_control_buttons.setText(_translate("MainWindow", "Set controls buttons"))
        self.label_1.setText(_translate("MainWindow", "1:"))
        self.label_com_log.setText(_translate("MainWindow", "COM Log"))
        self.label_2.setText(_translate("MainWindow", "2:"))
        self.label_3.setText(_translate("MainWindow", "3:"))
        self.label_4.setText(_translate("MainWindow", "4:"))
        self.toolButton_set_voltage.setText(_translate("MainWindow", "Set"))
        self.toolButton_set_current.setText(_translate("MainWindow", "Set"))

        self.listWidget.addItem('Hello World')
        self.listWidget.addItem('Lorem Ipsum')

        config = configparser.ConfigParser()
        config.read('configfile.ini')
        button_1 = config['function button']['1']
        button_2 = config['function button']['2']
        button_3 = config['function button']['3']
        button_4 = config['function button']['4']

        self.pushButton_1.setText(_translate("MainWindow", button_1))
        self.pushButton_2.setText(_translate("MainWindow", button_2))
        self.pushButton_3.setText(_translate("MainWindow", button_3))
        self.pushButton_4.setText(_translate("MainWindow", button_4))

        '''Setting COM settings'''
        self.pushButton_com_settings.clicked.connect(self.open_COM_settings_Window)

        '''Connect button'''
        self.pushButton_connect.clicked.connect(self.push_connect)

        '''What to do when you press buttons: start logging  or  end logging.
        Let's connect the corresponding functions that start and stop recording 
        (see them below)'''
        self.toolButton_start_logging.clicked.connect(self.push_start_logging)

        self.toolButton_end_logging.clicked.connect(self.push_end_logging)

        '''We want the settings window to open when we click the set control button 
        (see the function below)'''
        self.pushButton_set_control_buttons.clicked.connect(self.open_function_button_Window)

        '''Adding items to the drop-down list'''

        list_com_not_str = serial.tools.list_ports.comports()
        self.list_com = []
        for com in list_com_not_str:
            self.list_com.append(com.device)
            self.comboBox_select_com.addItem(com.device)

        '''Connecting a button to change the current and voltage of the corada'''
        self.toolButton_set_voltage.clicked.connect(self.push_set_voltage)
        self.toolButton_set_current.clicked.connect(self.push_set_current)

        '''We implement the operation of the radio button for automatic connection when it is pressed.
        But first, let's check whether it was pressed earlier.
        Information about this is in the configuration file in the DEFAULT section'''

        self.radioButton_automatically.clicked.connect(self.clicked_radioButton_automatically)

        if config['DEFAULT']['radio button']=='True':
            self.radioButton_automatically.setChecked(True)

            if config['DEFAULT']['COM port'] in self.list_com:
                self.comboBox_select_com.setCurrentText(config['DEFAULT']['COM port'])
                self.push_connect()

            else:
                print(QMessageBox.critical(self, "Ошибка ", "There is no com port that was previously selected when pressing the radio button automatically. Select one of the available com ports", QMessageBox.Ok))
                self.radioButton_automatically.setChecked(False)


    def push_set_voltage(self):
        print('HI push_set_voltage')
        voltage = self.lineEdit_v.text()
        voltage = "{:06.3f}".format(float(voltage))
        self.lineEdit_v.setText(voltage)
        self.ser.write(f'VSET:{float(voltage)}\r'.encode('ASCII'))


    def push_set_current(self):
        print('HI push_set_current')
        current = self.lineEdit_a.text()
        current = "{:06.3f}".format(float(current))
        self.lineEdit_a.setText(current)
        self.ser.write(f'ISET:{float(current)}\r'.encode('ASCII'))


    def clicked_radioButton_automatically(self):
        config = configparser.ConfigParser()
        config.read('configfile.ini')
        if config['DEFAULT']['radio button']=='True':
            config.set('DEFAULT', 'radio button', 'False')
        else:
            config.set('DEFAULT', 'radio button', 'True')
        with open('configfile.ini', 'w') as configfile:
            config.write(configfile)


    def open_COM_settings_Window(self):
        self.com_settings_window = QtWidgets.QMainWindow()
        self.com_settings_ui = COM_Settings_Window()
        self.com_settings_ui.setupUi(self.com_settings_window)
        self.com_settings_window.show()

    def open_function_button_Window(self):
        self.function_button_window = QtWidgets.QMainWindow()
        self.function_button_ui = Function_Button()
        self.function_button_ui.setupUi(self.function_button_window)
        self.function_button_window.show()
        self.function_button_ui.buttonBox.accepted.connect(self.push_ok_function_button)
    def push_ok_function_button(self):
        button_1 = self.function_button_ui.label_command_1.text()
        button_2 = self.function_button_ui.label_command_2.text()
        button_3 = self.function_button_ui.label_command_3.text()
        button_4 = self.function_button_ui.label_command_4.text()

        self.pushButton_1.setText(button_1)
        self.pushButton_2.setText(button_2)
        self.pushButton_3.setText(button_3)
        self.pushButton_4.setText(button_4)


    def update_voltage_current_display(self):
        self.ser.write(b'VOUT?\r')
        self.voltage = float(self.ser.readline().decode()[:-1])
        self.label_v_display.setText("{:06.3f}".format(float(self.voltage)))

        self.ser.write(b'IOUT?\r')
        self.current = float(self.ser.readline().decode()[:-1])
        self.label_a_display.setText("{:06.3f}".format(float(self.current)))

    def push_connect(self):
        if self.pushButton_connect.text() == 'Connect':
            self.pushButton_connect.setText('Disconnect')
            self.pushButton_connect.setStyleSheet("QPushButton{\n"
                                          "font: 500 10pt Tahoma;\n"
                                          "color: rgb(0, 0, 0);\n"
                                          "background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 rgb(255, 49, 49), stop:1 rgb(255, 169, 169));\n"
                                          "border: 1px solid rgb(172, 172, 172);         \n"
                                          "border-radius:5;\n"
                                          "}\n"
                                          "QPushButton:pressed {\n"
                                          "font: 500 10pt Tahoma;\n"
                                          "color:rgb(62, 62, 62);\n"
                                          "background-color:rgb(255, 116, 116);\n"
                                          "border: 2px solid rgb(172, 172, 172);            \n"
                                          "border-radius:5\n"
                                          "}\n"
                                          "                                              ")
            config = configparser.ConfigParser()
            config.read('configfile.ini')
            bits_per_second = config['COM settings']['bits per second']
            data_bits = config['COM settings']['data bits']
            parity = config['COM settings']['parity']
            stop_bits = config['COM settings']['stop bits']
            flow_control_bits = config['COM settings']['flow control']
            flow_control_bits_xon_xoff = flow_control_bits == 'Xon / Xoff'
            flow_control_bits_hardware = flow_control_bits == 'Hardware'
            com_port = self.comboBox_select_com.currentText()
            dict_parity = {'None': serial.PARITY_NONE,
                           'Even': serial.PARITY_EVEN,
                           'Odd': serial.PARITY_ODD,
                           'Mark': serial.PARITY_MARK,
                           'Space': serial.PARITY_SPACE}
            self.ser = serial.Serial(com_port,
                                     int(bits_per_second),
                                     timeout=1,
                                     parity=dict_parity[parity],
                                     stopbits=float(stop_bits),
                                     xonxoff=flow_control_bits_xon_xoff,
                                     rtscts=flow_control_bits_hardware,
                                     bytesize=int(data_bits))
            self.timer = QTimer()
            self.timer.timeout.connect(self.update_voltage_current_display)
            self.timer.start(self.time_update_display)
        else:
            self.pushButton_connect.setText('Connect')
            self.pushButton_connect.setStyleSheet("QPushButton {\n"
                                                  "    font: 500 10pt \"Tahoma\";\n"
                                                  "    color: rgb(255, 0, 0);\n"
                                                  "    background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 rgb(179, 179, 179,255), stop:1 rgba(255, 255, 255, 255));\n"
                                                  "    border: 1px solid rgb(172, 172, 172);            \n"
                                                  "    border-radius:5;\n"
                                                  "}\n"
                                                  "QPushButton:pressed {\n"
                                                  "    font: 500 10pt \"Tahoma\";\n"
                                                  "    color: rgb(184, 0, 0);\n"
                                                  "    background-color:rgb(177, 177, 177);\n"
                                                  "    border: 2px solid rgb(172, 172, 172);            \n"
                                                  "    border-radius:5;\n"
                                                  "}\n"
                                                  "")
            self.timer.stop()
            self.ser.close()


    '''Read data from lineEdit and prepare csv file'''
    def push_start_logging(self):
        # Prepare csv file
        f = open('Data_t_v_a.csv', "w+")
        f.close() # Clear file
        # Write header
        with open("Data_t_v_a.csv", mode="a", encoding='utf-8') as w_file:
            file_writer = csv.writer(w_file, delimiter="|", lineterminator="\r")
            file_writer.writerow(['Time', 'Voltaage', 'Current'])

        # Read data from lineEdit
        self.start_current = float(self.lineEdit_start_current.text())
        self.end_current = float(self.lineEdit_end_current.text())
        self.current_interval = float(self.lineEdit_current_interval.text())
        self.period = float(self.lineEdit_period.text())

        if self.end_current - self.start_current <= 0:
            pass
        if self.period < 0.0000001:
            '''
            Нужно узнать минимальный период
            '''
            pass


        '''
        
        
        
        
        Проверить, что введенные данные числовые
        
        
        
        
        '''

        # Create cite for graphics
        vbox = QVBoxLayout(self.graphicsView)
        self.figure = matplotlib.figure.Figure()
        self.canvas = FigureCanvas(self.figure)
        self.toolbar = NavigationToolbar(self.canvas, self)
        vbox.addWidget(self.canvas)
        vbox.addWidget(self.toolbar)



        self.x = []
        self.y = []

        self.axes = self.figure.add_subplot(111)
        self.axes.plot([], [], color='b')
        # Animation graphics
        self.ani = animation.FuncAnimation(self.figure,
                                           self.update,
                                           frames=math.ceil((self.end_current - self.start_current)/self.current_interval),
                                           interval=0,
                                           repeat=False)

        self.figure.canvas.draw_idle()


    '''Plotting graphics function. Also adds elements to the table and save data'''

    def update(self, i):
        # Let's request data
        if i+1 == math.ceil((self.end_current - self.start_current)/self.current_interval):
            self.ser.write(f'ISET:{self.end_current}\r'.encode('ASCII'))
        else:
            self.ser.write(f'ISET:{self.start_current + (i+1)*self.current_interval}\r'.encode('ASCII'))
        a = time.time()
        QtTest.QTest.qWait(int(1000*self.period))


        self.ser.write(b'IOUT?\r')
        current = float(self.ser.readline().decode()[:-1])
        self.ser.write(b'VOUT?\r')
        voltage = float(self.ser.readline().decode()[:-1])
        b = time.time()
        timetime = b - a

        self.x.append(voltage)
        self.y.append(current)

        # Writing data into a table
        self.tableWidget.setRowCount(i+1)
        # Set time
        self.tableWidget.setItem(i, 0, QTableWidgetItem("{:06.3f}".format(timetime)))
        # Set voltage
        self.tableWidget.setItem(i, 1, QTableWidgetItem("{:06.3f}".format(voltage)))
        # Set current
        self.tableWidget.setItem(i, 2, QTableWidgetItem("{:06.3f}".format(current)))

        # Save data time voltage and current in data_t_v_a.log
        with open("Data_t_v_a.csv", mode="a", encoding='utf-8') as w_file:
            file_writer = csv.writer(w_file, delimiter="|", lineterminator="\r")
            file_writer.writerow(["{:06.3f}".format(timetime), "{:06.3f}".format(voltage), "{:06.3f}".format(current)])
        # Clear figur and show plot
        self.axes.cla()
        self.axes.plot(self.x, self.y, color='b')

    def push_end_logging(self):
        self.ani.stop()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
